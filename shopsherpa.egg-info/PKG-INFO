Metadata-Version: 2.4
Name: shopsherpa
Version: 0.1.0
Summary: ShopSherpa MVP - AI product chooser for headphones
Author-email: ShopSherpa Team <team@shopsherpa.com>
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: pydantic>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: httpx>=0.25.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pre-commit>=3.5.0; extra == "dev"

# ShopSherpa MVP

An agentic AI product chooser for headphones, built with FastAPI, LangGraph, and modern Python tooling.

## Quickstart

### Prerequisites

- Python 3.11+
- pip

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd ShopSherpa
```

2. Install dependencies:
```bash
make install
```

3. Copy environment configuration:
```bash
cp .env.example .env
```

4. Run the development server:
```bash
make dev
```

The API will be available at `http://localhost:8000`

### API Documentation

- Interactive API docs: `http://localhost:8000/docs`
- ReDoc: `http://localhost:8000/redoc`

### Available Endpoints

- `GET /healthz` - Health check endpoint

### Development Commands

```bash
make dev     # Run development server with auto-reload
make test    # Run tests
make lint    # Run linting checks
make fmt     # Format code with black, isort, and ruff
make clean   # Clean up temporary files
```

### Testing

Run the test suite:
```bash
make test
```

### Code Quality

The project uses:
- **Black** for code formatting
- **isort** for import sorting
- **Ruff** for linting
- **pytest** for testing
- **pre-commit** hooks for code quality

Run formatting and linting:
```bash
make fmt
make lint
```

### Project Structure

```
ShopSherpa/
├── app/
│   ├── __init__.py
│   ├── main.py              # FastAPI application
│   ├── api/
│   │   ├── __init__.py
│   │   └── health.py        # Health check endpoints
│   └── core/
│       ├── __init__.py
│       └── config.py        # Application configuration
├── tests/
│   ├── __init__.py
│   └── test_health.py       # Health endpoint tests
├── pyproject.toml           # Project configuration
├── Makefile                 # Development commands
├── .env.example             # Environment variables template
├── .ruff.toml              # Ruff configuration
├── .pre-commit-config.yaml # Pre-commit hooks
└── README.md               # This file
```

## Technology Stack

- **FastAPI** - Modern, fast web framework
- **Pydantic** - Data validation and settings management
- **Uvicorn** - ASGI server
- **pytest** - Testing framework
- **httpx** - HTTP client for testing
- **Ruff** - Fast Python linter
- **Black** - Code formatter
- **isort** - Import sorter

## License

MIT License
